name: "Create release"
run-name: "Create release ${{ inputs.name }} force: ${{ inputs.force }} dry-run: ${{ inputs.dry-run }}"

on:
  workflow_dispatch:
    inputs:
      name: # release tag
        description: "Release tag (i.e. x.y.z)"
        default: ""
        required: true
      force:
        description: "Force the release creation. This will overwrite an existing release with the same tag."
        default: false
        type: boolean
      dry-run:
        type: boolean
        description: "Do not publish. Builds image and runs tests but does not publish the release. (dry-run)"
        default: false
#      create-pr:
#        type: boolean
#        description: "Create PR to management-plane-charts"
#        default: true

permissions:
  id-token: write # This is required for requesting the JWT token
  contents: write # This is required for creating a release

env:
  GH_HOST: github.com
  GH_TOKEN: ${{ github.token }}
  GH_REPO: ${{ github.repository }}
  PUSH_PAT: ${{ secrets.BOT_PAT_FOR_PUSHING }}
  IMAGE_REGISTRY: europe-docker.pkg.dev/kyma-project/prod
  IMAGE_NAME: kyma-otel-collector

jobs:
  validate-release:
    name: Validate release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Check if that release tag is correctly formatted
        run: |
          # Validate that the release tag is a proper semantic version
          if ! [[ ${{ inputs.name }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error ::Release tag ${{ inputs.name }} is not a valid semantic version"
            exit 1
          fi

      - name: Do NOT allow overriding a release when it is not a draft
        run: |
          # check if release exists
          ! gh release view ${{ inputs.name }} --json tagName && exit 0
          # allow only overriding draft releases
          gh release view ${{ inputs.name }} --json isDraft,tagName | jq -e .isDraft==true

      - name: Recreate the release tag if it already exists
        if: ${{ inputs.force }}
        run: |
          git tag --delete ${{ inputs.name }} || true
          git push --delete origin ${{ inputs.name }} || true

      - name: Check if release tag already exists
        if: ${{ !inputs.force }}
        run: |
          if [ $(git tag -l ${{ inputs.name }}) ]; then
            echo "::error ::Tag ${{ inputs.name }} already exists"
            exit 1
          fi

      - name: Check if milestone for release exists and is closed
        if: ${{ !inputs.force }}
        run: |
          state=$( gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --hostname ${GH_HOST} \
            '/repos/'${GH_REPO}'/milestones?state=all' --paginate | jq -r '.[]|select(.title=="${{ inputs.name }}").state' )

          if [ -z "$state" ] || [ "$state" != "closed" ]; then
            echo "::error::Milestone for release ${{ inputs.name }} does not exist or is not closed"
            exit 1
          fi

      - name: Check for existing artifacts from previous release runs
        if: ${{ !inputs.force }}
        run: |
          # run the script to check if the artifacts exist, ignore failure if force is set
          ! docker run ananace/skopeo inspect docker://${IMAGE_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} || ${{ inputs.force }}

  create-draft:
    name: Create draft release
    needs:
      - validate-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          # without this token we would not trigger the tag image workflow
          token: '${{ secrets.BOT_PAT_FOR_PUSHING }}'
          ref: ${{ github.ref }}

      - name: Setup release branch
        run: |
          #parse version into major, minor, patch
          major=$(echo ${{ inputs.name }} | cut -d. -f1)
          minor=$(echo ${{ inputs.name }} | cut -d. -f2)
          patch=$(echo ${{ inputs.name }} | cut -d. -f3)
          
          # check if we need to setup a release branch
          if [ $patch -eq 0 ]; then
              # check if the release branch already exists
              if git show-ref --verify --quiet refs/heads/release-$major.$minor; then
              echo "Release branch already exists"
              exit 1
              else
                  # create the release branch from main
                  git checkout -b release-$major.$minor origin/main
              fi
          # if we have a non .0 release, checkout the release branch
          else
            # check if the release branch already exists
            if ! git show-ref --verify --quiet refs/heads/release-$major.$minor; then
                git checkout release-$major.$minor
            else
                echo "Release branch does not exist"
                exit 1
            fi
          fi

      - name: Create lightweight tag and push
        run: |
          git tag ${{ inputs.name }}
          # push the tag to the repository and trigger the tag release workflow
          git push origin ${{ inputs.name }}

      - name: Recreate the release if it already exists
        if: ${{ inputs.force }}
        run: |
          gh release delete ${{ inputs.name }} || true

      - name: Create draft release
        id: create-draft
        run: |
          gh release create ${{ inputs.name }} \
            --draft \
            --title "${{ inputs.name }}" \
            --generate-notes \
            --verify-tag

#  run-unit-tests:
#    env:
#      GH_HOST: github.com
#      GH_ENTERPRISE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      GH_REPO: ${{ github.repository }}
#      IMAGE_REGISTRY: europe-docker.pkg.dev/kyma-project/prod
#      IMAGE_NAME: consumption-reporter
#      IMAGE_TAG: ${{ inputs.name }}
#    name: Unit tests
#    needs: create-draft
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repo
#        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
#        with:
#          fetch-depth: 0
#          ref: ${{ inputs.name }}
#      - name: Setup Golang
#        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
#        with:
#          go-version-file: "go.mod"
#          cache: true
#
#      - name: Run tests
#        run: make test

  envs:
    runs-on: ubuntu-latest
    outputs:
      build-args: ${{ steps.prepare-envs.outputs.build-args }}
      tag: ${{ steps.create-tags.outputs.tag }}
      otel-version: ${{ steps.load-envs.outputs.OTEL_VERSION }}
      otel-contrib-version: ${{ steps.load-envs.outputs.OTEL_CONTRIB_VERSION }}
      current-tag: ${{ steps.create-tags.outputs.CURRENT_TAG }}
      previous-tag: ${{ steps.create-tags.outputs.PREVIOUS_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.name }}

      - name: Prepare envs
        id: prepare-envs
        run: |
          {
          # this creates a multiline string with the envs.
          # Everything between `build-args<<BUILD_ARGS` and BUILD_ARGS will be content of the build-args variable.
          echo 'build-args<<BUILD_ARGS'
          cat otel-collector/envs
          echo BUILD_ARGS
          } >> "$GITHUB_OUTPUT"

      - name: load envs into output
        id: load-envs
        run: |
          cat otel-collector/envs >> "$GITHUB_OUTPUT"

      - name: create tags
        id: create-tags
        run: |
          # the tag will look similar to: 0.102.1-0.1.0
          echo 'TAG=${{ steps.load-envs.outputs.OTEL_VERSION }}-${{ inputs.name }}' >> "$GITHUB_OUTPUT"
          echo 'CURRENT_TAG=${{ github.ref_name }}' >> "$GITHUB_OUTPUT"

          # join all tags with the new tag in one list. Inject our new version in the list. Sort the list and get the line prior to the new tag
          previous_version=$(git for-each-ref --sort=creatordate --format '%(refname)' refs/tags \
          | grep -E "^refs/tags/[0-9]+\.[0-9]+\.[0-9]+$" \
          | grep -E "[0-9]+\.[0-9]+\.[0-9]+" -o \
          | sort -t "." -k1,1n -k2,2n -k3,3n \
          | grep -B 1 ${{ inputs.name }} | head -1)

          echo "PREVIOUS_TAG=${previous_version}" >> "$GITHUB_OUTPUT"

  check-prerequisites:
    name: Check release pre-requisites
    needs:
      - create-draft
#      - run-unit-tests
      - envs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.ref }}

      - name: Check if image exists in registry
        run: |
          # check if the image exists (every 15 seconds, up to 15 minutes)
          for i in {1..60}; do
            docker run ananace/skopeo inspect docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.envs.outputs.tag }} && break
            sleep 15
          done
          docker run ananace/skopeo inspect docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.envs.outputs.tag }} || exit 1

  publish-release:
    name: Publish release
    needs:
      - check-prerequisites
      - create-draft
    if: inputs.dry-run == false
    runs-on: ubuntu-latest

    steps:
      - name: Publish release
        run: |
          gh release edit ${{ inputs.name }} --draft=false

#  create-pr-to-management-plane-charts:
#    name: Create PR to management-plane-charts
#    env:
#      GH_HOST: github.com
#    needs:
#      - publish-release
#    runs-on: [self-h
#    if: inputs.create-pr == true
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
#        with:
#          repository: kyma/management-plane-charts
#          ref: chart/consumption-reporter
#          token: ${{ secrets.MPC_TOKEN }}
#
#      - name: Login to GitHub
#        run: |
#          gh auth login --with-token <<< ${{ secrets.MPC_TOKEN }}
#
#      - name: Create branch
#        run: |
#          git checkout -b kcr-release-${{ inputs.name }}
#
#      - name: Setup python
#        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5
#        with:
#          python-version: "3.x"
#          cache: "pip" # caching pip dependencies
#      - run: pip install -r tools/requirements.txt
#
#      - name: bump chart version
#        run: |
#          make bump-patch
#
#      - name: Update tag in values.yaml
#        run: |
#          yq -i '.image.tag = "${{ inputs.name }}"' consumption-reporter/values.yaml
#          yq -i '.appVersion = "${{ inputs.name }}"' consumption-reporter/Chart.yaml
#
#      - name: Commit changes
#        run: |
#          git add .
#          git commit -m "Bump consumption-reporter to ${{ inputs.name }}"
#
#      - name: Create PR
#        run: |
#          git push origin kcr-release-${{ inputs.name }}
#          gh pr create --base chart/consumption-reporter --head kcr-release-${{ inputs.name }} --title "Bump consumption-reporter to ${{ inputs.name }}" --body "Bump consumption-reporter to ${{ inputs.name }}" --label pr-deploy
